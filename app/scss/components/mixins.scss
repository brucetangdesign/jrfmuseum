//browser prefixes
@mixin prefixr($property, $value, $prefixes: (webkit, moz, ms, o) ) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: #{$value};
  }
  @if($property==display and $value==flex){
    @each $prefix in $prefixes {
      #{$property}: -#{$prefix}-#{$value};
    }
  }
  #{$property}: #{$value};
}

//Responsive breakpoints
@mixin breakpoint($point) {
  @if $point == xxl-up {
    @media (min-width: 1450px) { @content; }
  }

  @if $point == xxl {
    @media (max-width: 1450px) { @content; }
  }

  @if $point == xl {
    @media (min-width: 1281px) { @content; }
  }

  @if $point == l {
    @media (max-width: 1280px) { @content; }
  }

  @if $point == m-l-up {
    @media (min-width: 1189px) { @content; }
  }

  @if $point == m-l {
    @media (max-width: 1188px) { @content; }
  }

  @if $point == m-up {
    @media (min-width: 1021px) { @content; }
  }

  @if $point == m {
    @media (max-width: 1020px) { @content; }
  }

  @if $point == m-s-up {
    @media (min-width: 961px) { @content; }
  }

  @if $point == m-s {
    @media (max-width: 960px) { @content; }
  }

  @if $point == s-up {
    @media (min-width: 769px) { @content; }
  }

  @if $point == s {
    @media (max-width: 768px) { @content; }
  }

  @if $point == xs-640-up {
    @media (min-width: 641px) { @content; }
  }

  @if $point == xs-640 {
    @media (max-width: 640px) { @content; }
  }

  @if $point == xs-up {
    @media (min-width: 481px) { @content; }
  }

  @if $point == xs {
    @media (max-width: 480px) { @content; }
  }
}

@mixin set-feature-responsive-sizes($property, $value, $s-value: null){
  #{$property}: $value + 0px;

  @include breakpoint(l){
    #{$property}: decimalRound($value * 0.8, 0) + 0px;
  }

  @include breakpoint(m){
      #{$property}: decimalRound($value * 0.6, 0) + 0px;
  }

  @include breakpoint(m-s){
      #{$property}: decimalRound($value * 0.5, 0) + 0px;
  }

  @if $s-value{
    @include breakpoint(s){
        #{$property}: $s-value;
    }
  }
}

//Width calculator
@mixin max-width-calc($value){
  @if $value == full {
    max-width: $max-site-width;
  }

  @if $value == half {
    max-width: ($max-site-width/2px);
  }
}

//Centering absolute position elements
@mixin center-vert-horizontal(){
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translateX(-50%) translateY(-50%);
    -webkit-transform: translateX(-50%) translateY(-50%);
}

@mixin center-vert(){
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
}

@mixin center-horizontal(){
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    -webkit-transform: translateX(-50%);
}

//Rem calculator
@function getRem($size) {
  $remSize: $size / $base-font-size;
  @return #{$remSize}rem;
}

//Round for whole numbers
@function decimalRound($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @if $digits > 0 {
        @for $i from 1 through $digits {
            $n: $n * 10;
        }
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}
